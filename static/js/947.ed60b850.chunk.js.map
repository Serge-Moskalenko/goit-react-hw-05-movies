{"version":3,"file":"static/js/947.ed60b850.chunk.js","mappings":"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","sources":["ApiServise.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nexport class ApiServise {\n  constructor() {\n    this.url = 'https://api.themoviedb.org/3/';\n    this.key = '411d08d89a4569fb1b50aec07ee6fb72';\n    this.searchQuery = '';\n    this.page = 1;\n    this.idMovie = null;\n  }\n  async fetchMovie(movie) {\n    try {\n      const searchParams = new URLSearchParams({\n        api_key: this.key,\n        language:'en-US',\n        query: movie,\n        page: 1,\n        include_adult: false,\n      });\n      const request = `${this.url}search/movie?${searchParams}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n  async fetchById(id) {\n    try {\n      const request = `${this.url}movie/${id}?api_key=${this.key}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  async fetchDefault() {\n    try {\n      const request = `${this.url}trending/movie/day?api_key=${this.key}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  async fetchReviews(id) {\n    try {\n      const searchParams = new URLSearchParams({\n        api_key: this.key,\n        language:'en-US',\n        page: 1,\n      });\n      const request = `${this.url}movie/${id}/reviews?${searchParams}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  async fetchCast(id) {\n    try {\n    \n        const request = `${this.url}movie/${id}/credits?api_key=${this.key}`;\n      const data = await axios.get(request);\n    \n        return data;\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n  get movieId() {\n    return this.idMovie;\n  }\n  set movieId(movieId) {\n    this.idMovie = movieId;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n};","import { ApiServise } from 'ApiServise';\nimport { useState, useEffect, Suspense  } from 'react';\nimport { NavLink, useParams,Outlet } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst Api = new ApiServise();\n\n\nexport const MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movies, setMovies] = useState();\n  const location = useLocation();\n  const url = 'https://image.tmdb.org/t/p/w500';\n  const back = location.state?.from ?? '/';\n\n  useEffect(() => {\n    Api.fetchById(movieId).then(({ data }) => setMovies(data))\n  }, [movieId]);\n\n  return (\n    <>\n      <NavLink to={back}>Go back</NavLink>\n      \n      {movies && (\n        <>\n          <section>\n            <h2>Movie details</h2>\n            <img\n              src={url + movies.poster_path}\n              alt={movies.title}\n              width={200}\n            />\n            <div style={{ display: \"flex\", flexDirection: \"column\" }} >\n              <h3>\n                {movies.title ? movies.title : 'Not title'}\n                {new Date(movies.release_date).getFullYear()}\n              </h3>\n              <ul>\n                <li>\n                  <p>\n                    <b>User score: </b>\n                    {movies.vote_average.toFixed(2)}\n                  </p>\n                </li>\n                <li>\n                  <p>\n                    <b>Overview:</b> {movies.overview}\n                  </p>\n                </li>\n                <li>\n                  <p>\n                    <b>Genres:</b>\n                    {` ${movies.genres.map(genre => genre.name).join(' , ')}`}\n                  </p>\n                </li>\n              </ul>\n            </div>\n                        \n          </section>\n\n          <section>\n            <h3>Additional information</h3>\n            <ul>\n              <li>\n                <NavLink to=\"cast\" state={{ from: back }}>\n                  Cast\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to=\"reviews\" state={{ from: back }}>\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n            <Suspense fallback={null}>\n              <Outlet />\n            </Suspense>\n          </section>\n        </>\n      )}\n    </>\n  )\n};\n\nexport default MovieDetails"],"names":["ApiServise","this","url","key","searchQuery","page","idMovie","movie","searchParams","URLSearchParams","api_key","language","query","include_adult","request","axios","data","console","log","message","id","newQuery","movieId","Api","MovieDetails","useParams","useState","movies","setMovies","back","useLocation","state","from","useEffect","fetchById","then","to","src","poster_path","alt","title","width","style","display","flexDirection","Date","release_date","getFullYear","vote_average","toFixed","overview","genres","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}