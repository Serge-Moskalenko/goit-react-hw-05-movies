{"version":3,"file":"static/js/681.2beeaffc.chunk.js","mappings":"sOACaA,EAAb,WACE,cAAe,eACbC,KAAKC,IAAM,gCACXD,KAAKE,IAAM,mCACXF,KAAKG,YAAc,GACnBH,KAAKI,KAAO,EACZJ,KAAKK,QAAU,IAChB,CAPH,4EAQE,WAAiBC,GAAjB,2FAEUC,EAAe,IAAIC,gBAAgB,CACvCC,QAAST,KAAKE,IACdQ,SAAS,QACTC,MAAOL,EACPF,KAAM,EACNQ,eAAe,IAEXC,EATV,UASuBb,KAAKC,IAT5B,wBAS+CM,GAT/C,SAUuBO,EAAAA,EAAAA,IAAUD,GAVjC,cAUUE,EAVV,yBAWWA,GAXX,gCAaIC,QAAQC,IAAI,KAAMC,SAbtB,yDARF,iHAyBE,WAAgBC,GAAhB,yFAEUN,EAFV,UAEuBb,KAAKC,IAF5B,iBAEwCkB,EAFxC,oBAEsDnB,KAAKE,KAF3D,SAGuBY,EAAAA,EAAAA,IAAUD,GAHjC,cAGUE,EAHV,yBAIWA,GAJX,gCAMIC,QAAQC,IAAI,KAAMC,SANtB,yDAzBF,oHAkCE,sGAEUL,EAFV,UAEuBb,KAAKC,IAF5B,sCAE6DD,KAAKE,KAFlE,SAGuBY,EAAAA,EAAAA,IAAUD,GAHjC,cAGUE,EAHV,yBAIWA,GAJX,gCAMIC,QAAQC,IAAI,KAAMC,SANtB,yDAlCF,mHA2CE,WAAmBC,GAAnB,2FAEUZ,EAAe,IAAIC,gBAAgB,CACvCC,QAAST,KAAKE,IACdQ,SAAS,QACTN,KAAM,IAEFS,EAPV,UAOuBb,KAAKC,IAP5B,iBAOwCkB,EAPxC,oBAOsDZ,GAPtD,SAQuBO,EAAAA,EAAAA,IAAUD,GARjC,cAQUE,EARV,yBASWA,GATX,gCAWIC,QAAQC,IAAI,KAAMC,SAXtB,yDA3CF,iHA0DE,WAAgBC,GAAhB,yFAGYN,EAHZ,UAGyBb,KAAKC,IAH9B,iBAG0CkB,EAH1C,4BAGgEnB,KAAKE,KAHrE,SAIuBY,EAAAA,EAAAA,IAAUD,GAJjC,cAIUE,EAJV,yBAMaA,GANb,gCASIC,QAAQC,IAAI,KAAMC,SATtB,yDA1DF,wEAsEE,WACE,OAAOlB,KAAKG,WACb,EAxEH,IAyEE,SAAUiB,GACRpB,KAAKG,YAAciB,CACpB,GA3EH,mBA4EE,WACE,OAAOpB,KAAKK,OACb,EA9EH,IA+EE,SAAYgB,GACVrB,KAAKK,QAAUgB,CAChB,GAjFH,uBAkFE,WACErB,KAAKI,KAAO,CACb,KApFH,I,yHCGMkB,EAAM,IAAIvB,EAAAA,EAEHwB,EAAU,WACnB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQL,GAAYM,EAAAA,EAAAA,MAAZN,QAMR,OAJAO,EAAAA,EAAAA,YAAU,WACNN,EAAIO,aAAaR,GAASS,MAAK,YAA4B,IAAjBC,EAAgB,EAAxBhB,KAAQgB,QAAkBL,EAAWK,EAAW,GACrF,GAAE,CAACV,KAGA,gCACKI,IACG,wBACKA,EAAQO,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,2BACI,oCAAYD,MACZ,uBAAIC,MAFCf,EADA,MAHzB,MAWP,EAED,W","sources":["ApiServise.js","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nexport class ApiServise {\n  constructor() {\n    this.url = 'https://api.themoviedb.org/3/';\n    this.key = '411d08d89a4569fb1b50aec07ee6fb72';\n    this.searchQuery = '';\n    this.page = 1;\n    this.idMovie = null;\n  }\n  async fetchMovie(movie) {\n    try {\n      const searchParams = new URLSearchParams({\n        api_key: this.key,\n        language:'en-US',\n        query: movie,\n        page: 1,\n        include_adult: false,\n      });\n      const request = `${this.url}search/movie?${searchParams}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  async fetchById(id) {\n    try {\n      const request = `${this.url}movie/${id}?api_key=${this.key}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  async fetchDefault() {\n    try {\n      const request = `${this.url}trending/movie/day?api_key=${this.key}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  async fetchReviews(id) {\n    try {\n      const searchParams = new URLSearchParams({\n        api_key: this.key,\n        language:'en-US',\n        page: 1,\n      });\n      const request = `${this.url}movie/${id}/reviews?${searchParams}`;\n      const data = await axios.get(request);\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  async fetchCast(id) {\n    try {\n    \n        const request = `${this.url}movie/${id}/credits?api_key=${this.key}`;\n      const data = await axios.get(request);\n    \n        return data;\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n  get movieId() {\n    return this.idMovie;\n  }\n  set movieId(movieId) {\n    this.idMovie = movieId;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ApiServise } from \"ApiServise\"\n\nconst Api = new ApiServise();\n\nexport const Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        Api.fetchReviews(movieId).then(({ data: { results } }) => { setReviews(results); })\n    }, [movieId]);\n\n    return (\n        <>\n            {reviews && (\n                <ul>\n                    {reviews.map(({ id, author, content }) => (\n                        <li key={id}>\n                            <b>Author: {author}</b>\n                            <p>{content}</p>\n                        </li>\n                    ))}\n                </ul>)};\n        </>);\n};\n\nexport default Reviews"],"names":["ApiServise","this","url","key","searchQuery","page","idMovie","movie","searchParams","URLSearchParams","api_key","language","query","include_adult","request","axios","data","console","log","message","id","newQuery","movieId","Api","Reviews","useState","reviews","setReviews","useParams","useEffect","fetchReviews","then","results","map","author","content"],"sourceRoot":""}